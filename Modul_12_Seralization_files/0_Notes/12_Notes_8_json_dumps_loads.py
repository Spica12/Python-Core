"""
Серіалізація об'єктів Python за допомогою json

Протокол JSON (розшифровується як JavaScript Object Notation) — дуже популярний 
в інтернеті протокол передачі. Цей протокол має низку переваг:

- простий, його легко реалізувати;
- читабельний;
- відносно компактний (є набагато економніші протоколи).

Перша перевага зробила JSON універсальним, будь-яка сучасна мова програмування 
підтримує JSON. А якщо ні, то ви самі можете легко реалізувати підтримку JSON.

Недоліки у JSON теж є:

- обмежений набір типів;
- ресурсомісткий (є й вимогливіші до ресурсів протоколи).

JSON підтримує такі типи даних:

1. запис (як словник у Python), в якості ключа можуть бути ТІЛЬКИ рядки, значення — будь-який JSON тип;
2. масив (як список у Python);
3. число (немає різниці між цілими або дробовими);
4. літерал (True, False, None);
5. рядок.

Як і у Python запис та масив можуть містити вкладені записи та/або словники будь-якої глибини вкладеності.

Варто бути обережним з конвертацією типів під час роботи з JSON у Python. Кортежі під час розпакування 
з JSON стають списками, ключі словника, якщо вони були числами, стають рядками ж.

Python підтримує JSON і в стандартному постачанні є пакет json, в якому є все необхідне для роботи з JSON.
"""
import json

some_data = {'key': 'value', 
             2: [1, 2, 3], 
             'tuple': (5, 6), 
             'a': {'key': 'value'}
}

byte_string = json.dumps(some_data)
unpacked = json.loads(byte_string)

print(some_data['key'] == unpacked['key'])
print(some_data['a'] == unpacked['a'])
print(some_data[2] == unpacked['2'])